This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2024-12-18T11:48:56.984Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
public/
  assets/
    doors-preview.webp
    monty-hall-preview.svg
    sleeping-beauty-preview.svg
  sounds/
    intro.mp3
  vite.svg
src/
  assets/
    react.svg
  components/
    monty-hall/
      hooks/
        useSound.js
      utils/
        game-logic.js
      Door.jsx
      Door2.jsx
      Door3.jsx
      Explanation.jsx
      GameScene.jsx
      IntroScreen.jsx
      MontyHall.jsx
      TypeWriter.jsx
    sleeping-beauty/
      stages/
        ExplanationStage.jsx
        FirstAwakeningStage.jsx
        IntroStage.jsx
        PerspectiveShiftStage.jsx
      HistoryPanel.jsx
      NarrationText.jsx
      NarrationText.jsx.new
      NarrationText.tsx
      ProbabilitySelector.jsx
      SleepingBeauty.jsx
      VideoBackground.jsx
    HomePage.jsx
  App.css
  App.jsx
  constants.js
  index.css
  main.jsx
.gitignore
context.md
convert.js
eslint.config.js
index.html
package.json
postcss.config.js
README.md
tailwind.config.js
vite.config.js

================================================================
Repository Files
================================================================

================
File: public/assets/doors-preview.webp
================
WEBP

================
File: public/assets/monty-hall-preview.svg
================
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg xmlns="http://www.w3.org/2000/svg" width="800" height="400" viewBox="0 0 800 400">
  <!-- Background -->
  <rect width="100%" height="100%" fill="#0D0E12"/>
  
  <!-- Three doors -->
  <g transform="translate(230,50)">
    <!-- Door 1 -->
    <rect x="0" y="0" width="100" height="220" rx="5" fill="#1E2028"/>
    <rect x="8" y="8" width="84" height="204" rx="3" fill="#2A2C37"/>
    <text x="50" y="120" font-family="Arial" font-size="36" fill="#6493EA" text-anchor="middle">1</text>
    
    <!-- Door 2 -->
    <rect x="120" y="0" width="100" height="220" rx="5" fill="#1E2028"/>
    <rect x="128" y="8" width="84" height="204" rx="3" fill="#2A2C37"/>
    <text x="170" y="120" font-family="Arial" font-size="36" fill="#6493EA" text-anchor="middle">2</text>
    
    <!-- Door 3 (slightly open) -->
    <rect x="240" y="0" width="100" height="220" rx="5" fill="#1E2028"/>
    <rect x="248" y="8" width="84" height="204" rx="3" fill="#2A2C37"/>
    <text x="290" y="120" font-family="Arial" font-size="36" fill="#6493EA" text-anchor="middle">3</text>
    <!-- Door opening indicator -->
    <rect x="240" y="210" width="100" height="10" fill="#3B3E4D"/>
  </g>
  
  <!-- Small shadow -->
  <rect x="230" y="270" width="340" height="2" rx="1" fill="#3B3E4D" opacity="0.5"/>
</svg>

================
File: public/assets/sleeping-beauty-preview.svg
================
<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<svg xmlns="http://www.w3.org/2000/svg" width="800" height="400" viewBox="0 0 800 400">
  <!-- Background -->
  <rect width="100%" height="100%" fill="#0D0E12"/>
  
  <!-- Stars -->
  <g fill="#A48BE9" fill-opacity="0.3">
    <circle cx="150" cy="50" r="1"/>
    <circle cx="250" cy="80" r="1"/>
    <circle cx="450" cy="30" r="1"/>
    <circle cx="650" cy="70" r="1"/>
    <circle cx="350" cy="40" r="1"/>
    <circle cx="550" cy="60" r="1"/>
    <circle cx="200" cy="90" r="1"/>
  </g>
  
  <!-- Moon -->
  <path d="M620 60a40 40 0 1 1 40 40 32 32 0 0 0 0-64" fill="#A48BE9" opacity="0.2"/>

  <!-- Thought bubble -->
  <ellipse cx="400" cy="160" rx="80" ry="40" fill="#1E2028"/>
  
  <!-- Question mark -->
  <circle cx="400" cy="160" r="25" fill="#A48BE9" opacity="0.8"/>
  <text x="400" y="170" font-family="Arial" font-size="30" fill="#0D0E12" text-anchor="middle" font-weight="bold">?</text>
  
  <!-- Timeline dots -->
  <g transform="translate(350,270)">
    <line x1="0" y1="0" x2="100" y2="0" stroke="#3B3E4D" stroke-width="2"/>
    <circle cx="0" cy="0" r="3" fill="#A48BE9"/>
    <circle cx="50" cy="0" r="3" fill="#A48BE9"/>
    <circle cx="100" cy="0" r="3" fill="#A48BE9"/>
  </g>
</svg>

================
File: public/sounds/intro.mp3
================
404: Not Found

================
File: public/vite.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>

================
File: src/assets/react.svg
================
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>

================
File: src/components/monty-hall/hooks/useSound.js
================
import { useEffect, useRef } from 'react';
import { Howl } from 'howler';

const useSound = () => {
  const soundsRef = useRef({});

  useEffect(() => {
    soundsRef.current = {
      intro: new Howl({ src: ['/sounds/intro.mp3'] }),
      select: new Howl({ src: ['/sounds/select.mp3'] }),
      open: new Howl({ src: ['/sounds/open.mp3'] }),
      win: new Howl({ src: ['/sounds/win.mp3'] }),
      lose: new Howl({ src: ['/sounds/lose.mp3'] })
    };

    // Cleanup on unmount
    return () => {
      Object.values(soundsRef.current).forEach(sound => sound.unload());
    };
  }, []);

  const play = (soundName) => {
    if (soundsRef.current[soundName]) {
      soundsRef.current[soundName].play();
    }
  };

  return { play };
};

export default useSound;

================
File: src/components/monty-hall/utils/game-logic.js
================
export const initializeGame = () => {
  const carPosition = Math.floor(Math.random() * 3) + 1;
  return {
    doors: {
      1: { hasCar: carPosition === 1, isOpen: false },
      2: { hasCar: carPosition === 2, isOpen: false },
      3: { hasCar: carPosition === 3, isOpen: false }
    },
    carPosition,
    playerChoice: null,
    montyOpenedDoor: null,
    finalChoice: null,
    gamePhase: 'initial' // initial -> doorSelected -> montyRevealed -> finalChoice -> gameOver
  };
};

export const getMontyChoice = (doors, playerChoice) => {
  const availableDoors = Object.entries(doors)
    .filter(([number, door]) => {
      return parseInt(number) !== playerChoice && !door.hasCar;
    })
    .map(([number]) => parseInt(number));
    
  return availableDoors[Math.floor(Math.random() * availableDoors.length)];
};

export const calculateWinProbability = (isSwitch) => {
  return isSwitch ? 2/3 : 1/3;
};

export const getOtherDoor = (doors, playerChoice, montyOpenedDoor) => {
  return Object.keys(doors)
    .map(Number)
    .find(num => num !== playerChoice && num !== montyOpenedDoor);
};

export const determineWinner = (doors, finalChoice) => {
  return doors[finalChoice].hasCar;
};

================
File: src/components/monty-hall/Door.jsx
================
import React, { useState } from 'react';
import { useSpring, animated, config } from '@react-spring/web';

const Door = ({ number, isOpen, hasCar, isSelected, onSelect, isSelectable }) => {
  const [isHovered, setIsHovered] = useState(false);

  const springProps = useSpring({
    transform: `
      perspective(1000px)
      rotateY(${isOpen ? -105 : 0}deg)
      scale(${isHovered && isSelectable ? 1.05 : 1})
    `,
    config: { ...config.gentle }
  });

  const [isHovered, setIsHovered] = useState(false);

  const doorSpring = useSpring({
    transform: isOpen 
      ? 'perspective(1000px) rotateY(-70deg)'
      : 'perspective(1000px) rotateY(0deg)',
    scale: isHovered && isSelectable ? 1.05 : 1,
    config: { tension: 180, friction: 12 }
  });

  return (
    <animated.div 
      style={doorSpring}
      className={`relative w-64 h-96 ${isSelectable ? 'cursor-pointer' : 'cursor-default'} 
                  ${isSelected ? 'ring-4 ring-yellow-400' : ''}`}
      onMouseEnter={() => setIsHovered(true)}
      onMouseLeave={() => setIsHovered(false)}
      onClick={() => isSelectable && onSelect(number)}
    >
      <div className="absolute inset-0 bg-gradient-to-b from-amber-800 to-amber-950 
                      rounded-lg border-4 border-amber-700/80 shadow-xl transform 
                      transition-transform duration-300 ease-out">
        {/* Door Frame */}
        <div className="absolute inset-2 border-2 border-amber-600/30 rounded-md"></div>
        
        {/* Door Panels */}
        <div className="absolute inset-4 grid grid-cols-2 gap-2">
          <div className="bg-amber-900/50 rounded"></div>
          <div className="bg-amber-900/50 rounded"></div>
          <div className="bg-amber-900/50 rounded"></div>
          <div className="bg-amber-900/50 rounded"></div>
        </div>
        
        {/* Door Knob */}
        <div className="absolute right-4 top-1/2 -translate-y-1/2 w-6 h-6">
          <div className="absolute inset-0 bg-amber-300 rounded-full shadow-lg"></div>
          <div className="absolute inset-1 bg-amber-400 rounded-full"></div>
        </div>
        
        {/* Door Number */}
        <div className="absolute inset-0 flex items-center justify-center">
          <div className="relative">
            <div className="absolute -inset-2 bg-amber-600/20 rounded-full blur-sm"></div>
            <span className="relative text-4xl font-bold text-amber-100">
              {number}
            </span>
          </div>
        </div>
      </div>
      
      <div className="absolute inset-0 -z-10 flex items-center justify-center 
                      bg-gradient-to-b from-gray-800 to-gray-900">
        {isOpen && (
          <div className="text-center transform scale-150 transition-transform duration-500">
            {hasCar ? (
              <div className="relative">
                <div className="absolute -inset-4 bg-yellow-400/20 rounded-full blur-md animate-pulse"></div>
                <div className="text-6xl transform hover:scale-110 transition-transform">🚗</div>
                <div className="mt-2 text-yellow-400 font-bold">Grand Prize!</div>
              </div>
            ) : (
              <div className="relative">
                <div className="absolute -inset-4 bg-gray-400/10 rounded-full blur-md"></div>
                <div className="text-6xl transform hover:scale-110 transition-transform">🐐</div>
                <div className="mt-2 text-gray-400 font-bold">Better luck next time!</div>
              </div>
            )}
          </div>
        )}
      </div>
    </animated.div>
  );
};

export default Door;

================
File: src/components/monty-hall/Door2.jsx
================
import React, { useState } from 'react';
import { useSpring, animated, config } from '@react-spring/web';

const Door = ({ number, isOpen, hasCar, isSelected, onSelect, isSelectable }) => {
  const [isHovered, setIsHovered] = useState(false);

  const springProps = useSpring({
    transform: isOpen 
      ? 'rotateY(-105deg) scale(1)'
      : `rotateY(0deg) scale(${isHovered && isSelectable ? 1.05 : 1})`,
    config: { tension: 120, friction: 14 }
  });

  const glowProps = useSpring({
    boxShadow: isSelected
      ? '0 0 20px rgba(234, 179, 8, 0.5)'
      : '0 0 0px rgba(234, 179, 8, 0)',
    config: config.gentle
  });

  return (
    <div className="relative w-64 h-96 mx-auto" style={{ perspective: '1500px' }}>
      {/* Content behind the door */}
      <div className="absolute inset-0 flex items-center justify-center bg-gradient-to-b from-gray-800 to-gray-900">
        {isOpen && (
          <div className="text-center transform scale-150">
            {hasCar ? (
              <div className="relative">
                <div className="absolute -inset-8 bg-yellow-400/20 rounded-full blur-xl animate-pulse"></div>
                <div className="text-8xl">🚗</div>
                <div className="text-lg text-yellow-400 font-bold mt-4">You win!</div>
              </div>
            ) : (
              <div className="relative">
                <div className="absolute -inset-8 bg-gray-400/10 rounded-full blur-xl"></div>
                <div className="text-8xl animate-bounce">🐐</div>
                <div className="text-lg text-gray-400 font-bold mt-4">Baaa!</div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* Door */}
      <animated.div
        style={{
          ...springProps,
          ...glowProps,
          transformOrigin: 'left',
          transformStyle: 'preserve-3d',
          position: 'absolute',
          inset: 0,
        }}
        className={`w-full h-full ${isSelectable ? 'cursor-pointer' : 'cursor-default'}`}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        onClick={() => isSelectable && onSelect(number)}
      >
        {/* Front of the door */}
        <div className="absolute inset-0 bg-gradient-to-b from-yellow-800 to-yellow-950 
                    rounded-lg border-4 border-yellow-700 shadow-xl">
          {/* Door Frame */}
          <div className="absolute inset-2 border-2 border-yellow-600/30 rounded"></div>
          
          {/* Door Panels */}
          <div className="absolute inset-4 grid grid-cols-2 gap-2">
            <div className="bg-yellow-900/50 rounded shadow-inner"></div>
            <div className="bg-yellow-900/50 rounded shadow-inner"></div>
            <div className="bg-yellow-900/50 rounded shadow-inner"></div>
            <div className="bg-yellow-900/50 rounded shadow-inner"></div>
          </div>
          
          {/* Door Number */}
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="relative">
              <div className="absolute -inset-4 bg-yellow-600/20 rounded-full blur-sm"></div>
              <span className="relative text-5xl font-bold text-yellow-100">
                {number}
              </span>
            </div>
          </div>
          
          {/* Door Knob */}
          <div className="absolute right-6 top-1/2 -translate-y-1/2 w-8 h-8">
            <div className="absolute inset-0 bg-yellow-300 rounded-full shadow-lg"></div>
            <div className="absolute inset-1 bg-yellow-400 rounded-full"></div>
          </div>
        </div>

        {/* Back of the door (inner side) */}
        <div className="absolute inset-0 bg-yellow-900/80 rounded-lg border-2 border-yellow-800"
             style={{ transform: 'rotateY(180deg) translateZ(1px)' }}>
        </div>

        {/* Room/wall behind the door */}
        <div 
          className="absolute inset-0 flex items-center justify-center bg-gradient-to-b from-gray-800 to-gray-900"
          style={{ 
            transform: 'translateZ(-1px)',
            transformStyle: 'preserve-3d',
          }}
        >
          {isOpen && (
            <div className="text-center transform scale-[200%] transition-all duration-500"
                 style={{ transform: 'translateZ(0) scale(2)' }}>
              <div className="fixed-content">
                {hasCar ? (
                  <div className="relative">
                    <div className="absolute -inset-8 bg-yellow-400/20 rounded-full blur-xl animate-pulse"></div>
                    <div className="text-8xl" style={{ filter: 'drop-shadow(0 0 10px rgba(255,215,0,0.5))' }}>🚗</div>
                    <div className="text-lg text-yellow-400 font-bold mt-4">You win!</div>
                  </div>
                ) : (
                  <div className="relative">
                    <div className="absolute -inset-8 bg-gray-400/10 rounded-full blur-xl"></div>
                    <div className="text-8xl animate-bounce">🐐</div>
                    <div className="text-lg text-gray-400 font-bold mt-4">Baaa!</div>
                  </div>
                )}
              </div>
            </div>
          )}
        </div>
      </animated.div>
    </div>
  );
};

export default Door;

================
File: src/components/monty-hall/Door3.jsx
================
import React, { useState } from 'react';
import { useSpring, animated, config } from '@react-spring/web';

const Door = ({ number, isOpen, hasCar, isSelected, onSelect, isSelectable }) => {
  const [isHovered, setIsHovered] = useState(false);

  const springProps = useSpring({
    rotateY: isOpen ? -105 : 0,
    scale: isHovered && isSelectable ? 1.05 : isSelected ? 1.05 : 1,
    config: { tension: 120, friction: 14 }
  });

  return (
    <div className="relative w-64 h-96">
      {/* Background wall with content */}
      <div className="absolute inset-0 bg-gradient-to-b from-gray-800 to-gray-900 rounded-lg flex items-center justify-center">
        {isOpen && (
          <div className="text-center">
            {hasCar ? (
              <div className="relative scale-150">
                <div className="absolute -inset-8 bg-yellow-400/20 rounded-full blur-xl animate-pulse"></div>
                <div className="text-8xl transform animate-bounce-slow">🚗</div>
                <div className="mt-4 text-yellow-400 font-bold text-xl">Grand Prize!</div>
              </div>
            ) : (
              <div className="relative scale-150">
                <div className="absolute -inset-8 bg-gray-400/10 rounded-full blur-xl"></div>
                <div className="text-8xl transform animate-bounce">🐐</div>
                <div className="mt-4 text-gray-400 font-bold text-xl">Baaa!</div>
              </div>
            )}
          </div>
        )}
      </div>

      {/* The door itself */}
      <animated.div
        style={{
          position: 'absolute',
          inset: 0,
          transformOrigin: 'left',
          transform: springProps.rotateY.to(
            r => `perspective(1500px) rotateY(${r}deg) scale(${springProps.scale.get()})`
          ),
        }}
        className={`${!isOpen ? 'transition-all duration-300' : ''} ${
          isSelectable ? 'cursor-pointer hover:ring-4 hover:ring-blue-400 hover:ring-offset-4 hover:ring-offset-gray-900' : 'cursor-default'
        } ${
          isSelected ? 'ring-4 ring-yellow-400 ring-offset-4 ring-offset-gray-900 shadow-2xl' : ''
        }`}
        onMouseEnter={() => setIsHovered(true)}
        onMouseLeave={() => setIsHovered(false)}
        onClick={() => isSelectable && onSelect(number)}
      >
        {/* Front of door */}
        <div className="absolute inset-0 bg-gradient-to-b from-amber-800 to-amber-950 
                      rounded-lg border-4 border-amber-700/80 shadow-xl">
          {/* Door panel design */}
          <div className="absolute inset-4 grid grid-cols-2 gap-2">
            {[...Array(4)].map((_, i) => (
              <div key={i} className="bg-amber-900/50 rounded shadow-inner"></div>
            ))}
          </div>
          
          {/* Door number */}
          <div className="absolute inset-0 flex items-center justify-center">
            <span className="text-4xl font-bold text-amber-100">{number}</span>
          </div>
          
          {/* Door knob */}
          <div className="absolute right-4 top-1/2 -translate-y-1/2">
            <div className="w-6 h-6 bg-amber-300 rounded-full shadow-lg">
              <div className="absolute inset-1 bg-amber-400 rounded-full"></div>
            </div>
          </div>
        </div>

        {/* Back of door */}
        <div className="absolute inset-0 bg-amber-900/80 rounded-lg border-2 border-amber-800"
             style={{ 
               backfaceVisibility: 'hidden',
               transform: 'rotateY(180deg)',
             }}>
        </div>
      </animated.div>
    </div>
  );
};

export default Door;

================
File: src/components/monty-hall/Explanation.jsx
================
import { useSpring, animated } from '@react-spring/web';
import ReactConfetti from 'react-confetti';
import { useState, useEffect } from 'react';

const Explanation = ({ hasWon, didSwitch, onPlayAgain }) => {
  const [windowSize, setWindowSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight,
  });

  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);
  const fadeIn = useSpring({
    from: { opacity: 0, transform: 'translateY(20px)' },
    to: { opacity: 1, transform: 'translateY(0px)' },
    config: { tension: 280, friction: 20 }
  });

  return (
    <animated.div 
      style={fadeIn}
      className="fixed inset-0 flex items-center justify-center bg-gray-900 bg-opacity-95"
    >
      {hasWon && (
        <ReactConfetti
          width={windowSize.width}
          height={windowSize.height}
          numberOfPieces={200}
          recycle={false}
          colors={['#FFD700', '#FFA500', '#FF69B4', '#00FF00', '#4169E1']}
        />
      )}
      <div className="max-w-2xl p-8 bg-gray-800 rounded-xl text-white">
        <h2 className="text-4xl font-bold mb-6 text-center">
          {hasWon ? '🎉 Congratulations!' : '😔 Better luck next time!'}
        </h2>
        
        <div className="space-y-4 text-lg">
          <p>
            You {didSwitch ? 'switched' : 'stayed'} and {hasWon ? 'won' : 'lost'}!
          </p>
          
          <div className="my-6 p-4 bg-gray-700 rounded-lg">
            <h3 className="text-xl font-bold mb-3">The Mathematics Behind It:</h3>
            <p className="mb-3">
              When you first choose a door, your probability of picking the car is 1/3,
              meaning the probability that the car is behind one of the other doors is 2/3.
            </p>
            <p className="mb-3">
              When Monty opens a door with a goat (which he always can and will do),
              all of that 2/3 probability transfers to the remaining unopened door.
            </p>
            <p>
              Therefore, switching doors gives you a 2/3 chance of winning,
              while staying with your original choice maintains your initial 1/3 probability.
            </p>
          </div>
          
          <p className="text-center text-xl">
            Switching doors doubles your chances of winning!
          </p>
        </div>

        <div className="mt-8 text-center">
          <button
            onClick={onPlayAgain}
            className="px-6 py-3 bg-purple-600 hover:bg-purple-700 rounded-lg text-white font-bold"
          >
            Play Again
          </button>
        </div>
      </div>
    </animated.div>
  );
};

export default Explanation;

================
File: src/components/monty-hall/GameScene.jsx
================
import { useState, useEffect } from 'react';
import { useSpring, animated } from '@react-spring/web';
import Door from './Door3';
import { initializeGame, getMontyChoice, getOtherDoor, determineWinner } from './utils/game-logic';
import TypeWriter from './TypeWriter';

const GameScene = ({ onGameOver }) => {
  const [gameState, setGameState] = useState(initializeGame());
  const [message, setMessage] = useState({
    text: "Choose a door! One has a car, the others have goats.",
    typing: false,
    id: 0,
    speed: 'normal'
  });
  const [showButtons, setShowButtons] = useState(false);

  const fadeIn = useSpring({
    from: { opacity: 0 },
    to: { opacity: 1 },
    config: { duration: 800 }
  });

  const handleDoorSelect = (doorNumber) => {
    if (gameState.gamePhase !== 'initial' && gameState.gamePhase !== 'montyRevealed') return;

    if (gameState.gamePhase === 'initial') {
      setGameState(prev => ({
        ...prev,
        playerChoice: doorNumber,
        gamePhase: 'doorSelected'
      }));

      const montyDoor = getMontyChoice(gameState.doors, doorNumber);

      const showInitialMessage = () => {
        setMessage({
          text: "Here's a twist...",
          typing: true,
          id: Date.now(),
          speed: 'fast'
        });

        setTimeout(() => {
          setMessage(prev => ({ ...prev, typing: false }));
          showSecondMessage();
        }, 1500);
      };

      const showSecondMessage = () => {
        setMessage({
          text: "I'll reveal one of the doors that has a goat.",
          typing: true,
          id: Date.now(),
          speed: 'normal'
        });

        setTimeout(() => {
          setMessage(prev => ({ ...prev, typing: false }));
          // Open Monty's door
          setGameState(prev => ({
            ...prev,
            doors: {
              ...prev.doors,
              [montyDoor]: { ...prev.doors[montyDoor], isOpen: true }
            },
            montyOpenedDoor: montyDoor,
            gamePhase: 'montyRevealed'
          }));

          setTimeout(showFinalMessage, 1500);
        }, 2500);
      };

      const showFinalMessage = () => {
        setMessage({
          text: "Would you now like to stay with your decision or choose the other door?",
          typing: true,
          id: Date.now(),
          speed: 'normal'
        });

        setTimeout(() => {
          setMessage(prev => ({ ...prev, typing: false }));
          setShowButtons(true);
        }, 3000);
      };

      // Start the sequence
      showInitialMessage();
    }
  };

  const handleFinalChoice = (shouldSwitch) => {
    if (gameState.gamePhase !== 'montyRevealed') return;

    setShowButtons(false);
    const finalDoorChoice = shouldSwitch
      ? getOtherDoor(gameState.doors, gameState.playerChoice, gameState.montyOpenedDoor)
      : gameState.playerChoice;

    const revealSequence = () => {
      // First message - opening door
      setMessage({
        text: `Opening ${shouldSwitch ? 'new' : 'chosen'} door...`,
        typing: true,
        id: Date.now(),
        speed: 'fast'
      });

      setTimeout(() => {
        setMessage(prev => ({ ...prev, typing: false }));
        
        // Open the chosen door
        setGameState(prev => ({
          ...prev,
          playerChoice: finalDoorChoice,
          finalChoice: finalDoorChoice,
          doors: {
            ...prev.doors,
            [finalDoorChoice]: { ...prev.doors[finalDoorChoice], isOpen: true }
          },
          gamePhase: 'revealing'
        }));

        // Show result message after door opens
        const hasWon = determineWinner(gameState.doors, finalDoorChoice);
        setTimeout(() => {
          setMessage({
            text: hasWon ? "Let's see what's behind the other doors..." : "Let's see what you could have won...",
            typing: true,
            id: Date.now(),
            speed: 'normal'
          });

          // Open all remaining doors after message
          setTimeout(() => {
            setMessage(prev => ({ ...prev, typing: false }));
            
            setGameState(prev => ({
              ...prev,
              doors: Object.entries(prev.doors).reduce((acc, [key, door]) => ({
                ...acc,
                [key]: { ...door, isOpen: true }
              }), {}),
              gamePhase: 'gameOver'
            }));

            // Finally trigger game over
            setTimeout(() => {
              onGameOver(hasWon, shouldSwitch);
            }, 800);
          }, 2000);
        }, 1500);
      }, 1500);
    };

    // Start the reveal sequence
    revealSequence();
  };

  return (
    <animated.div style={fadeIn} className="min-h-screen bg-gray-900 text-white">
      <div className="container mx-auto px-4 py-8 relative">
        <div className="text-center mb-12">
          <div className="absolute -inset-1 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg blur opacity-75"></div>
          <h2 className="relative text-3xl md:text-4xl font-bold mb-4 p-4 bg-gray-900 rounded-lg">
            <TypeWriter
              text={message.text}
              typing={message.typing}
              id={message.id}
              speed={message.speed}
              onComplete={() => setMessage(prev => ({ ...prev, typing: false }))}
            />
          </h2>
        </div>

        <div className="flex flex-col md:flex-row justify-center items-center gap-8 md:gap-12">
          {Object.entries(gameState.doors).map(([number, door]) => (
            <Door
              key={number}
              number={parseInt(number)}
              isOpen={door.isOpen}
              hasCar={door.hasCar}
              isSelected={parseInt(number) === gameState.playerChoice}
              isSelectable={gameState.gamePhase === 'initial' || (
                gameState.gamePhase === 'montyRevealed' &&
                !door.isOpen &&
                parseInt(number) !== gameState.montyOpenedDoor
              )}
              onSelect={handleDoorSelect}
            />
          ))}
        </div>

        {gameState.gamePhase === 'montyRevealed' && showButtons && (
          <div className="mt-12 flex flex-col sm:flex-row justify-center gap-6">
            <button
              onClick={() => handleFinalChoice(false)}
              className="group relative px-8 py-4 bg-gradient-to-r from-blue-600 to-blue-700
                         hover:from-blue-500 hover:to-blue-600 rounded-xl text-white font-bold
                         transform transition-all duration-200 hover:scale-105
                         shadow-lg hover:shadow-blue-500/50"
            >
              <div className="absolute -inset-1 bg-blue-600 rounded-xl blur opacity-30
                            group-hover:opacity-50 transition-opacity"></div>
              <span className="relative">Stay with Door {gameState.playerChoice}</span>
            </button>
            <button
              onClick={() => handleFinalChoice(true)}
              className="group relative px-8 py-4 bg-gradient-to-r from-green-600 to-green-700
                         hover:from-green-500 hover:to-green-600 rounded-xl text-white font-bold
                         transform transition-all duration-200 hover:scale-105
                         shadow-lg hover:shadow-green-500/50"
            >
              <div className="absolute -inset-1 bg-green-600 rounded-xl blur opacity-30
                            group-hover:opacity-50 transition-opacity"></div>
              <span className="relative">Switch Door</span>
            </button>
          </div>
        )}
      </div>
    </animated.div>
  );
};

export default GameScene;

================
File: src/components/monty-hall/IntroScreen.jsx
================
import { useState, useEffect } from 'react';
import { useSpring, animated } from '@react-spring/web';

const IntroScreen = ({ onComplete }) => {
  const [isVisible, setIsVisible] = useState(true);

  const fadeIn = useSpring({
    from: { opacity: 0 },
    to: { opacity: 1 },
    config: { duration: 1000 }
  });

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(false);
      setTimeout(onComplete, 1000);
    }, 3000);

    return () => clearTimeout(timer);
  }, [onComplete]);

  const fadeOut = useSpring({
    opacity: isVisible ? 1 : 0,
    config: { duration: 1000 }
  });

  return (
    <animated.div 
      style={{ ...fadeIn, ...fadeOut }}
      className="fixed inset-0 flex items-center justify-center bg-gradient-to-b from-gray-900 to-gray-800"
    >
      <div 
        className="text-center p-8 rounded-2xl bg-black/30 backdrop-blur-sm 
                   border border-white/10 shadow-2xl transform"
      >
        <div className="relative">
          <div className="absolute -inset-1 bg-gradient-to-r from-purple-600 to-pink-600 rounded-lg blur opacity-75"></div>
          <div className="relative p-8">
            <h1 className="text-4xl md:text-6xl font-bold text-white mb-4 tracking-tight">
              Welcome to
            </h1>
            <h2 className="text-5xl md:text-7xl font-extrabold text-transparent bg-clip-text 
                          bg-gradient-to-r from-purple-400 to-pink-600 mt-2">
              The Monty Hall Game
            </h2>
          </div>
        </div>
        <p className="mt-6 text-gray-300 text-lg md:text-xl">
          Are you ready to test your probability skills?
        </p>
        <div className="mt-8 animate-pulse">
          <p className="text-gray-400 text-sm">Starting in a moment...</p>
        </div>
      </div>
    </animated.div>
  );
};

export default IntroScreen;

================
File: src/components/monty-hall/MontyHall.jsx
================
import { useState } from 'react';
import { Link } from 'react-router-dom';
import IntroScreen from './IntroScreen';
import GameScene from './GameScene';
import Explanation from './Explanation';
import '../../App.css';

const MontyHall = () => {
  const [gameState, setGameState] = useState('intro'); // intro, playing, explanation
  const [gameResult, setGameResult] = useState(null);

  const handleIntroComplete = () => {
    setGameState('playing');
  };

  const handleGameOver = (hasWon, didSwitch) => {
    setGameResult({ hasWon, didSwitch });
    setGameState('explanation');
  };

  const handlePlayAgain = () => {
    setGameState('playing');
    setGameResult(null);
  };

  return (
    <div className="relative min-h-screen bg-gray-900">
      <Link 
        to="/" 
        className="absolute top-4 left-4 text-white hover:text-blue-300 transition-colors z-50"
      >
        ← Back to Home
      </Link>
      
      {gameState === 'intro' && <IntroScreen onComplete={handleIntroComplete} />}
      
      {gameState === 'playing' && <GameScene onGameOver={handleGameOver} />}
      
      {gameState === 'explanation' && gameResult && (
        <Explanation
          hasWon={gameResult.hasWon}
          didSwitch={gameResult.didSwitch}
          onPlayAgain={handlePlayAgain}
        />
      )}
    </div>
  );
};

export default MontyHall;

================
File: src/components/monty-hall/TypeWriter.jsx
================
import React, { useState, useEffect } from 'react';

const TypeWriter = ({
  text,
  typing,
  onComplete,
  id,
  speed = 'normal'
}) => {
  const [displayText, setDisplayText] = useState('');

  const getTypingInterval = () => {
    const baseSpeed = {
      slow: 80,
      normal: 50,
      fast: 30
    }[speed] || 50;
    return baseSpeed;
  };

  useEffect(() => {
    if (!typing) return;
    
    setDisplayText('');
    let currentIndex = 0;
    const interval = getTypingInterval();
    
    const timer = setInterval(() => {
      if (currentIndex < text.length) {
        currentIndex++;
        setDisplayText(text.slice(0, currentIndex));
      } else {
        clearInterval(timer);
        onComplete?.();
      }
    }, interval);

    return () => clearInterval(timer);
  }, [text, typing, speed, onComplete]);

  return (
    <span className="inline-block min-h-[1.5em]">
      {typing ? displayText : text}
    </span>
  );
};

export default TypeWriter;

================
File: src/components/sleeping-beauty/stages/ExplanationStage.jsx
================
import React from 'react';
import NarrationText from '../NarrationText';

function ExplanationStage({ selectedProbability, skipTyping, setSkipTyping, addToHistory }) {
  const probabilityText = selectedProbability === 0.5 ? "1/2 (50%)" : "1/3 (33.3%)";
  
  return (
    <div 
      className="relative w-screen h-screen bg-gradient-to-b from-purple-900 to-black"
      onClick={() => setSkipTyping(true)}
    >
      <div className="absolute inset-0 flex items-start md:items-center justify-center overflow-y-auto py-4 md:py-0">
        <div className="w-full max-w-4xl px-4 py-6 md:p-6">
          <div className="bg-black/5 backdrop-blur-sm p-8 rounded-xl shadow-2xl space-y-8">
            <div className="opacity-100">
              <NarrationText
                text={`You assessed the probability as ${probabilityText}. Let's explore why this is such a fascinating paradox.`}
                onComplete={() => addToHistory(`Final probability assessment: ${probabilityText}`)}
                skipTyping={skipTyping}
                setSkipTyping={setSkipTyping}
              />
            </div>
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-4 md:gap-8">
              <div className="bg-black/5 p-6 rounded-xl backdrop-blur-md">
                <h3 className="text-xl font-bold text-blue-400 mb-4 opacity-100">Halfers Argument (1/2)</h3>
                <ul className="space-y-3 text-gray-200 opacity-100">
                  <li className="flex gap-2">
                    <span className="text-blue-400">•</span>
                    <span>The coin is fair and was flipped only once</span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-blue-400">•</span>
                    <span>No new information is gained upon awakening</span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-blue-400">•</span>
                    <span>Multiple awakenings don't affect the past outcome</span>
                  </li>
                </ul>
              </div>

              <div className="bg-black/5 p-6 rounded-xl backdrop-blur-md">
                <h3 className="text-xl font-bold text-blue-400 mb-4 opacity-100">Thirders Argument (1/3)</h3>
                <ul className="space-y-3 text-gray-200 opacity-100">
                  <li className="flex gap-2">
                    <span className="text-blue-400">•</span>
                    <span>Three possible awakening scenarios</span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-blue-400">•</span>
                    <span>One with Heads, two with Tails</span>
                  </li>
                  <li className="flex gap-2">
                    <span className="text-blue-400">•</span>
                    <span>Each awakening is equally likely</span>
                  </li>
                </ul>
              </div>
            </div>

            <div className="bg-black/5 p-6 rounded-xl backdrop-blur-md">
              <h3 className="text-xl font-bold text-blue-400 mb-4 opacity-100">Key Insights</h3>
              <div className="opacity-100">
                <NarrationText
                  text="This paradox reveals deep questions about probability and consciousness. Does your subjective experience of awakening change the probability? Can the same event have different probabilities from different perspectives? The debate continues in philosophy and mathematics, showing how simple setups can lead to profound questions."
                  onComplete={() => addToHistory("The paradox reveals deep questions about probability and consciousness, leading to ongoing philosophical debate.")}
                  skipTyping={skipTyping}
                  setSkipTyping={setSkipTyping}
                />
              </div>
            </div>

            <div className="flex justify-center gap-4">
              <a
                href="https://www.youtube.com/watch?v=XeSu9fBJ2sI"
                target="_blank"
                rel="noopener noreferrer"
                className="px-6 py-3 bg-blue-600 text-white font-semibold rounded-lg hover:bg-blue-700 transition-colors"
              >
                Watch Veritasium's Explanation
              </a>
              <a
                href="https://en.wikipedia.org/wiki/Sleeping_Beauty_problem"
                target="_blank"
                rel="noopener noreferrer"
                className="px-6 py-3 bg-purple-600 text-white font-semibold rounded-lg hover:bg-purple-700 transition-colors"
              >
                Read on Wikipedia
              </a>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default ExplanationStage;

================
File: src/components/sleeping-beauty/stages/FirstAwakeningStage.jsx
================
import React from 'react';
import VideoBackground from '../VideoBackground';
import NarrationText from '../NarrationText';
import ProbabilitySelector from '../ProbabilitySelector';
import { PROBABILITY_OPTIONS } from '../../../constants';

function FirstAwakeningStage({ onComplete, skipTyping, setSkipTyping, addToHistory }) {
  return (
    <div className="relative h-screen w-full md:w-[calc(100vw-24rem)]">
      <div className="absolute inset-0 z-0">
        <VideoBackground 
          videoSource="/assets/second.mp4" 
          isPlaying={true}
          onLoadedData={() => console.log('Second video loaded')} 
        />
      </div>
      <div className="absolute inset-0 flex items-end pb-32 justify-center">
        <div className="max-w-2xl w-full px-4">
          <div className="bg-black/5 backdrop-blur-sm p-8 rounded-xl shadow-2xl">
            <div className="opacity-100">
              <NarrationText
                text="You are now awake. If the coin landed Heads, you are awakened once. If Tails, you wake twice (but won't remember the first awakening). What is the probability that the coin landed Heads?"
                onComplete={() => addToHistory("You are now awake. If the coin landed Heads, you are awakened once. If Tails, you wake twice (but won't remember the first awakening). What is the probability that the coin landed Heads?")}
                skipTyping={skipTyping}
                setSkipTyping={setSkipTyping}
              />
            </div>
            <div className="mt-8">
              <ProbabilitySelector
                options={PROBABILITY_OPTIONS}
                onSelect={(prob) => {
                  addToHistory(`Initial probability assessment: ${prob === 0.5 ? "1/2 (50%)" : "1/3 (33.3%)"}`);
                  onComplete();
                }}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default FirstAwakeningStage;

================
File: src/components/sleeping-beauty/stages/IntroStage.jsx
================
import React from 'react';
import VideoBackground from '../VideoBackground';
import NarrationText from '../NarrationText';

function IntroStage({ onContinue, skipTyping, setSkipTyping, addToHistory }) {
  return (
    <div className="relative w-full md:w-[calc(100vw-24rem)] h-screen">
      <VideoBackground 
        videoSource="/assets/first.mp4" 
        isPlaying={true}
        onLoadedData={() => console.log('First video loaded')} 
      />
      <div className="absolute inset-0 flex items-end justify-center bg-gradient-to-b from-transparent via-black/30 to-black/50 pb-16">
        <div className="max-w-2xl w-full mx-8">
          <div className="bg-black/5 backdrop-blur-md p-8 rounded-xl shadow-2xl border border-white/20">
            <div className="relative z-10 space-y-6">
              <div className="opacity-100">
                <NarrationText
                  text="Welcome to the Sleeping Beauty Paradox. You are about to participate in an experiment. A fair coin will be flipped. If it lands on Heads, you'll be awakened once. If it lands on Tails, you'll be awakened twice, but you won't remember the first awakening..."
                  onComplete={() => addToHistory("Welcome to the Sleeping Beauty Paradox. You are about to participate in an experiment. A fair coin will be flipped. If it lands on Heads, you'll be awakened once. If it lands on Tails, you'll be awakened twice, but you won't remember the first awakening...")}
                  skipTyping={skipTyping}
                  setSkipTyping={setSkipTyping}
                />
              </div>
              <button
                onClick={onContinue}
                className="mt-6 w-full md:w-auto px-8 py-3 bg-blue-600 text-white text-lg font-semibold rounded-lg hover:bg-blue-700 transition-colors shadow-lg block mx-auto cursor-pointer opacity-100"
              >
                Continue
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default IntroStage;

================
File: src/components/sleeping-beauty/stages/PerspectiveShiftStage.jsx
================
import React from 'react';
import NarrationText from '../NarrationText';
import ProbabilitySelector from '../ProbabilitySelector';
import { PROBABILITY_OPTIONS } from '../../../constants';

function PerspectiveShiftStage({ onComplete, onProbabilitySelect, skipTyping, setSkipTyping, addToHistory }) {
  return (
    <div className="relative w-full md:w-[calc(100vw-24rem)] h-screen">
      <img
        src="/assets/bedroom_scene.webp"
        alt="Bedroom Scene"
        className="absolute top-0 left-0 w-full h-full object-cover"
      />
      <div className="absolute inset-0 flex items-start md:items-center justify-center overflow-y-auto">
        <div className="w-full max-w-4xl p-4 md:p-6 mt-16 md:mt-0">
          <div className="bg-black/30 backdrop-blur-md p-6 md:p-8 rounded-xl shadow-2xl">
            <img
              src="/assets/three_scenarios.webp"
              alt="Three Scenarios"
              className="w-full max-w-2xl mx-auto mb-4 md:mb-8 rounded-lg"
            />
            <div className="opacity-100 mt-4">
              <NarrationText
                text="Consider your experience upon awakening. From your perspective in that moment, you could be in any of these three possible scenarios – the single awakening if Heads, or either of the two awakenings if Tails. Since each awakening feels identical and you have no way to distinguish between them, what's the probability that the coin landed Heads?"
                onComplete={() => addToHistory("Let's look at this from a different perspective. Here are all possible awakening scenarios. With Heads, there's one awakening. With Tails, there are two awakenings. Looking at all equally possible awakening events, what's the probability the coin landed Heads?")}
                skipTyping={skipTyping}
                setSkipTyping={setSkipTyping}
              />
            </div>
            <div className="mt-8">
              <ProbabilitySelector
                options={PROBABILITY_OPTIONS}
                onSelect={(prob) => {
                  onProbabilitySelect(prob);
                  addToHistory(`After seeing all scenarios, probability assessment: ${prob === 0.5 ? "1/2 (50%)" : "1/3 (33.3%)"}`);
                  onComplete();
                }}
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default PerspectiveShiftStage;

================
File: src/components/sleeping-beauty/HistoryPanel.jsx
================
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

function HistoryPanel({ history }) {
  const [isExpanded, setIsExpanded] = useState(false);

  const panelVariants = {
    hidden: { opacity: 0, y: 50 },
    visible: { opacity: 1, y: 0 },
  };

  const itemVariants = {
    hidden: { opacity: 0, x: 20 },
    visible: { opacity: 1, x: 0 },
  };

  return (
    <>
      {/* Mobile View - Bottom Panel */}
      <div className="md:hidden fixed bottom-0 left-0 right-0 z-20">
        <motion.button
          whileTap={{ scale: 0.98 }}
          onClick={() => setIsExpanded(!isExpanded)}
          className="w-full bg-black/90 backdrop-blur-md text-white py-3 px-6 flex items-center justify-between border-t border-white/10 shadow-lg"
        >
          <span className="text-base font-medium tracking-wide">Story History</span>
          <motion.span 
            animate={{ rotate: isExpanded ? 180 : 0 }}
            transition={{ duration: 0.3 }}
            className="text-white/70"
          >
            ▲
          </motion.span>
        </motion.button>
        
        <AnimatePresence>
          {isExpanded && (
            <motion.div
              initial="hidden"
              animate="visible"
              exit="hidden"
              variants={panelVariants}
              className="bg-black/90 backdrop-blur-md border-t border-white/5"
            >
              <div className="py-6 px-6 space-y-4 overflow-y-auto max-h-[70vh]">
                <AnimatePresence>
                  {history.map((text, index) => (
                    <motion.div
                      key={index}
                      variants={itemVariants}
                      initial="hidden"
                      animate="visible"
                      transition={{ delay: index * 0.1 }}
                      className="bg-white/5 rounded-lg p-4 text-sm text-white/90 whitespace-pre-wrap break-words shadow-lg"
                    >
                      {text}
                    </motion.div>
                  ))}
                </AnimatePresence>
              </div>
            </motion.div>
          )}
        </AnimatePresence>
      </div>

      {/* Desktop View - Side Panel */}
      <motion.div 
        initial={{ x: '100%' }}
        animate={{ x: 0 }}
        transition={{ type: 'spring', damping: 20 }}
        className="hidden md:block fixed top-0 right-0 h-full w-96 bg-black/90 backdrop-blur-md border-l border-white/10 z-20 shadow-2xl"
      >
        <div className="p-8 space-y-6 text-white h-full flex flex-col">
          <div className="text-xl font-semibold pb-4 border-b border-white/10 tracking-wide">
            Story History
          </div>
          <motion.div 
            className="flex-grow overflow-y-auto space-y-4 pr-4"
            style={{
              scrollbarWidth: 'thin',
              scrollbarColor: 'rgba(255,255,255,0.3) transparent'
            }}
          >
            <AnimatePresence>
              {history.map((text, index) => (
                <motion.div
                  key={index}
                  variants={itemVariants}
                  initial="hidden"
                  animate="visible"
                  transition={{ delay: index * 0.1 }}
                  className="bg-white/5 rounded-lg p-4 text-sm text-white/90 whitespace-pre-wrap break-words shadow-lg"
                >
                  {text}
                </motion.div>
              ))}
            </AnimatePresence>
          </motion.div>
        </div>
      </motion.div>
    </>
  );
}

export default HistoryPanel;

================
File: src/components/sleeping-beauty/NarrationText.jsx
================
import React, { useEffect, useRef, useCallback, useState } from 'react';
import Typed from 'typed.js';
import { motion } from 'framer-motion';

function NarrationText({ text, onComplete, skipTyping, setSkipTyping }) {
  const elementRef = useRef(null);
  const typedRef = useRef(null);
  const [hasCompleted, setHasCompleted] = useState(false);
  const [isSkippable, setIsSkippable] = useState(true);

  // Cleanup function to handle proper teardown
  const cleanup = useCallback(() => {
    if (typedRef.current) {
      typedRef.current.destroy();
      typedRef.current = null;
    }
  }, []);

  // Handle completion of typing
  const handleComplete = useCallback(() => {
    setHasCompleted(true);
    setIsSkippable(false);
    onComplete?.();
  }, [onComplete]);

  // Handle skipping of typing animation
  const handleSkip = useCallback((e) => {
    if (!typedRef.current || !isSkippable) return;
    
    e.stopPropagation();
    cleanup();
    
    if (elementRef.current) {
      elementRef.current.innerHTML = text;
    }
    
    handleComplete();
  }, [text, cleanup, handleComplete, isSkippable]);

  useEffect(() => {
    if (!elementRef.current || hasCompleted) return;

    cleanup(); // Clean up any existing instance
    setIsSkippable(true);

    // If skipTyping is true, show the text immediately
    if (skipTyping) {
      elementRef.current.innerHTML = text;
      handleComplete();
      return;
    }

    // Initialize new typing instance with improved settings
    typedRef.current = new Typed(elementRef.current, {
      strings: [text],
      typeSpeed: 35,
      showCursor: true,
      cursorChar: '▎',
      loop: false,
      onComplete: handleComplete,
      startDelay: 400,
      smartBackspace: true,
      backSpeed: 30,
      backDelay: 700,
      fadeOut: true,
      fadeOutDelay: 100,
    });

    // Add click listener for skipping
    document.addEventListener('click', handleSkip);

    return () => {
      cleanup();
      document.removeEventListener('click', handleSkip);
    };
  }, [text, skipTyping, handleComplete, handleSkip, cleanup]);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="relative px-4 pb-6 md:pb-8"
    >
      <div 
        ref={elementRef}
        className="text-lg md:text-xl text-white/90 font-medium leading-relaxed tracking-wide"
        style={{ 
          minHeight: '6rem',
          textShadow: '0 2px 4px rgba(0,0,0,0.5)',
          maxWidth: '70ch',
          margin: '0 auto',
        }}
      />
      {isSkippable && !skipTyping && (
        <motion.div
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1 }}
          className="absolute bottom-0 right-0 text-sm text-white/50 italic"
        >
          Click anywhere to skip
        </motion.div>
      )}
    </motion.div>
  );
}

export default NarrationText;

================
File: src/components/sleeping-beauty/NarrationText.jsx.new
================
import React, { useEffect, useRef } from 'react';
import Typed from 'typed.js';

function NarrationText({ text, onComplete, skipTyping, setSkipTyping }) {
  const typedRef = useRef(null);
  const elementRef = useRef(null);
  const isTypingInitialized = useRef(false);

  useEffect(() => {
    if (!elementRef.current || isTypingInitialized.current) return;
    
    const options = {
      strings: [text],
      typeSpeed: 40,
      showCursor: true,
      cursorChar: '|',
      loop: false,
      onComplete: () => {
        if (onComplete) onComplete();
      }
    };

    typedRef.current = new Typed(elementRef.current, options);
    isTypingInitialized.current = true;

    const handleSkip = (e) => {
      if (!skipTyping && typedRef.current) {
        e.stopPropagation();
        setSkipTyping(true);
        typedRef.current.destroy();
        elementRef.current.innerHTML = text;
        if (onComplete) onComplete();
      }
    };

    elementRef.current.addEventListener('click', handleSkip);

    return () => {
      if (typedRef.current) {
        typedRef.current.destroy();
      }
      if (elementRef.current) {
        elementRef.current.removeEventListener('click', handleSkip);
      }
      isTypingInitialized.current = false;
    };
  }, [text, onComplete, skipTyping, setSkipTyping]);

  return (
    <div
      ref={elementRef}
      className="text-xl

================
File: src/components/sleeping-beauty/NarrationText.tsx
================
import React, { useEffect, useRef } from 'react';
import Typed from 'typed.js';

function NarrationText({ text, onComplete, skipTyping, setSkipTyping }) {
  const typedRef = useRef(null);
  const elementRef = useRef(null);
  const isTypingInitialized = useRef(false);

  useEffect(() => {
    if (!elementRef.current || isTypingInitialized.current) return;
    
    const options = {
      strings: [text],
      typeSpeed: 40,
      showCursor: true,
      cursorChar: '|',
      loop: false,
      onComplete: () => {
        if (onComplete) onComplete();
      }
    };

    typedRef.current = new Typed(elementRef.current, options);
    isTypingInitialized.current = true;

    const handleSkip = (e) => {
      if (!skipTyping && typedRef.current) {
        e.stopPropagation();
        setSkipTyping(true);
        typedRef.current.destroy();
        elementRef.current.innerHTML = text;
        if (onComplete) onComplete();
      }
    };

    elementRef.current.addEventListener('click', handleSkip);

    return () => {
      if (typedRef.current) {
        typedRef.current.destroy();
      }
      if (elementRef.current) {
        elementRef.current.removeEventListener('click', handleSkip);
      }
      isTypingInitialized.current = false;
    };
  }, [text, onComplete, skipTyping, setSkipTyping]);

  return (
    <div
      ref={elementRef}
      className='text-xl text-white font-semibold min-h-[100px] cursor-pointer leading-relaxed p-4'
    >
      {text}
    </div>
  );
}

export default NarrationText;

================
File: src/components/sleeping-beauty/ProbabilitySelector.jsx
================
import React, { useState } from 'react';
import { motion } from 'framer-motion';

function ProbabilitySelector({ onSelect, options }) {
  const [selected, setSelected] = useState(null);

  return (
    <motion.div
      initial={{ opacity: 0, y: 20 }}
      animate={{ opacity: 1, y: 0 }}
      transition={{ duration: 0.5 }}
      className="flex flex-col items-center space-y-6 bg-black/80 backdrop-blur-sm px-4 py-6 md:px-8 md:py-8 rounded-xl border border-white/10 shadow-2xl"
    >
      <div className="space-y-4 w-full max-w-md">
        {options.map((option) => (
          <motion.label 
            key={option.value}
            whileHover={{ scale: 1.02 }}
            whileTap={{ scale: 0.98 }}
            className={`
              flex items-center p-4 md:p-5 rounded-xl transition-all duration-300 cursor-pointer
              border border-white/10 backdrop-blur-sm shadow-lg
              ${selected === option.value 
                ? 'bg-blue-600/40 border-blue-400/50 shadow-blue-500/20' 
                : 'bg-black/40 hover:bg-white/10 hover:border-white/20'}
            `}
          >
            <div className="relative">
              <input
                type="radio"
                name="probability"
                value={option.value}
                checked={selected === option.value}
                onChange={() => setSelected(option.value)}
                className="w-5 h-5 opacity-0 absolute"
              />
              <div className={`w-5 h-5 rounded-full border-2 mr-4 flex items-center justify-center transition-all duration-300 ${
                selected === option.value 
                  ? 'border-blue-400 bg-blue-400' 
                  : 'border-white/40'
              }`}>
                {selected === option.value && (
                  <motion.div
                    initial={{ scale: 0 }}
                    animate={{ scale: 1 }}
                    className="w-2 h-2 bg-white rounded-full"
                  />
                )}
              </div>
            </div>
            <span className="text-white text-lg font-medium">{option.label}</span>
          </motion.label>
        ))}
      </div>
      <motion.button
        whileHover={{ scale: 1.05 }}
        whileTap={{ scale: 0.95 }}
        onClick={() => selected && onSelect(selected)}
        disabled={!selected}
        className={`
          w-full md:w-auto px-8 py-4 rounded-xl font-medium text-lg
          transition-all duration-300 transform
          ${selected
            ? 'bg-blue-500 hover:bg-blue-600 text-white shadow-lg shadow-blue-500/30'
            : 'bg-gray-500/50 cursor-not-allowed text-gray-300'}
        `}
      >
        Confirm
      </motion.button>
    </motion.div>
  );
}

export default ProbabilitySelector;

================
File: src/components/sleeping-beauty/SleepingBeauty.jsx
================
import React, { useState } from 'react';
import { Link } from 'react-router-dom';
import IntroStage from './stages/IntroStage';
import FirstAwakeningStage from './stages/FirstAwakeningStage';
import PerspectiveShiftStage from './stages/PerspectiveShiftStage';
import ExplanationStage from './stages/ExplanationStage';
import HistoryPanel from './HistoryPanel';
import '../../App.css';

const SleepingBeauty = () => {
  const [currentStage, setCurrentStage] = useState('intro');
  const [history, setHistory] = useState([]);
  const [probability, setProbability] = useState(null);

  const addToHistory = (message) => {
    setHistory(prev => [...prev, message]);
  };

  const [skipTyping, setSkipTyping] = useState(false);

  const stageComponents = {
    'intro': <IntroStage 
      onContinue={() => setCurrentStage('firstAwakening')} 
      skipTyping={skipTyping}
      setSkipTyping={setSkipTyping}
      addToHistory={addToHistory}
    />,
    'firstAwakening': <FirstAwakeningStage 
      onComplete={() => setCurrentStage('perspectiveShift')}
      skipTyping={skipTyping}
      setSkipTyping={setSkipTyping}
      addToHistory={addToHistory}
    />,
    'perspectiveShift': <PerspectiveShiftStage 
      onComplete={() => setCurrentStage('explanation')}
      skipTyping={skipTyping}
      setSkipTyping={setSkipTyping}
      onProbabilitySelect={setProbability}
      addToHistory={addToHistory}
    />,
    'explanation': <ExplanationStage 
      selectedProbability={probability}
      skipTyping={skipTyping}
      setSkipTyping={setSkipTyping}
      addToHistory={addToHistory}
    />
  };

  return (
    <div className="relative min-h-screen bg-black text-white overflow-hidden">
      <Link 
        to="/" 
        className="absolute top-4 left-4 text-white hover:text-blue-300 transition-colors z-50"
      >
        ← Back to Home
      </Link>
      
      {stageComponents[currentStage]}
      
      {history.length > 0 && (
        <HistoryPanel history={history} />
      )}
    </div>
  );
};

export default SleepingBeauty;

================
File: src/components/sleeping-beauty/VideoBackground.jsx
================
import React, { useEffect, useRef, memo } from 'react';
import gsap from 'gsap';

const VideoBackground = memo(function VideoBackground({ videoSource, isPlaying, onLoadedData }) {
  const videoRef = useRef(null);
  const overlayRef = useRef(null);
  const loadedRef = useRef(false);
  const errorRef = useRef(null);
  const timeoutRef = useRef(null);

  useEffect(() => {
    const video = videoRef.current;
    if (!video) return;

    const fadeInVideo = () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }

      timeoutRef.current = setTimeout(() => {
        gsap.to(video, {
          duration: 1,
          opacity: 1,
          ease: 'power2.inOut'
        });

        gsap.to(overlayRef.current, {
          duration: 1,
          opacity: 0.5,
          ease: 'power2.inOut'
        });
      }, 0);
    };

    const handleError = (e) => {
      console.error("Video loading error:", e);
      errorRef.current = e;
      onLoadedData?.();
    };

    const handleLoadedData = () => {
      errorRef.current = null;
      loadedRef.current = true;
      fadeInVideo();
      onLoadedData?.();
    };

    video.addEventListener('loadeddata', handleLoadedData);
    video.addEventListener('error', handleError);
    
    try {
      video.load();
    } catch (e) {
      handleError(e);
    }
    
    return () => {
      if (timeoutRef.current) {
        clearTimeout(timeoutRef.current);
      }
      video.removeEventListener('loadeddata', handleLoadedData);
      video.removeEventListener('error', handleError);
    };
  }, [videoSource, onLoadedData]);

  useEffect(() => {
    const video = videoRef.current;
    if (!video || !loadedRef.current) return;

    const playVideo = async () => {
      if (isPlaying) {
        try {
          await video.play();
        } catch (error) {
          console.log("Video play error:", error);
        }
      } else {
        video.pause();
      }
    };

    playVideo();
  }, [isPlaying]);

  if (errorRef.current) {
    return (
      <div className="absolute inset-0 flex items-center justify-center bg-black">
        <div className="text-white text-center p-4">
          <p>Unable to load video</p>
          <p className="text-sm text-gray-400">Please check if the video file exists at {videoSource}</p>
        </div>
      </div>
    );
  }

  return (
    <div className="absolute inset-0 w-full h-full">
      <video
        ref={videoRef}
        src={videoSource}
        className="absolute inset-0 w-full h-full object-cover opacity-0"
        muted
        loop={!videoSource.includes('second.mp4')}
        playsInline
        autoPlay
      />
      <div 
        ref={overlayRef}
        className="absolute inset-0 bg-black opacity-0"
      />
    </div>
  );
});

export default VideoBackground;

================
File: src/components/HomePage.jsx
================
import React from 'react';
import { Link } from 'react-router-dom';

const ParadoxCard = ({ title, description, link, image, gradientFrom, gradientTo }) => (
  <div className="relative group h-full transition duration-300 ease-in-out">
    {/* Glow effect */}
    <div 
      className="absolute -inset-0.5 bg-gradient-to-r rounded-lg opacity-0 group-hover:opacity-100 blur transition duration-300 ease-in-out"
      style={{
        background: `linear-gradient(45deg, ${gradientFrom}, ${gradientTo}, ${gradientFrom})`,
      }}
    />
    <div className="relative h-full bg-[#1a1b1e] rounded-lg leading-none flex flex-col overflow-hidden ring-1 ring-white/5">
      <div className="w-full flex-1">
        <div className="h-48 overflow-hidden">
          <img 
            src={image} 
            alt={title} 
            className="w-full h-full object-cover transform transition duration-500 group-hover:scale-110" 
          />
        </div>
        <div className="p-8 flex flex-col flex-1">
          <h3 
            className="text-3xl font-bold mb-4 bg-clip-text text-transparent"
            style={{
              background: `linear-gradient(45deg, ${gradientFrom}, ${gradientTo})`,
              WebkitBackgroundClip: 'text',
            }}
          >
            {title}
          </h3>
          <p className="text-gray-300 mb-8 leading-relaxed flex-1">
            {description}
          </p>
          <Link 
            to={link} 
            className="group relative inline-flex items-center justify-center px-8 py-4 rounded-lg text-white font-medium transition-all duration-200 hover:scale-105 focus:outline-none"
            style={{
              background: `linear-gradient(45deg, ${gradientFrom}, ${gradientTo})`,
            }}
          >
            <span>Explore Paradox</span>
            <svg 
              className="ml-2 -mr-1 w-5 h-5 transition-transform duration-200 group-hover:translate-x-1" 
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24"
            >
              <path 
                strokeLinecap="round" 
                strokeLinejoin="round" 
                strokeWidth="2" 
                d="M13 7l5 5m0 0l-5 5m5-5H6"
              />
            </svg>
          </Link>
        </div>
      </div>
    </div>
  </div>
);

const HomePage = () => {
  const paradoxes = [
    {
      title: "Monty Hall Problem",
      description: "A classic probability puzzle that challenges your intuition. Should you switch doors when given the chance? Through this interactive simulation, discover why the mathematically optimal choice might surprise you, and learn how probability isn't always what it seems.",
      link: "/monty-hall",
      image: "/assets/monty-hall-preview.webp",
      gradientFrom: "#60A5FA",
      gradientTo: "#2563EB"
    },
    {
      title: "Sleeping Beauty Paradox",
      description: "Dive into a fascinating thought experiment that blends probability with consciousness. When Beauty awakens, what should she believe about a coin flip that determines her awakenings? Experience this mind-bending paradox through an immersive interactive journey.",
      link: "/sleeping-beauty",
      image: "/assets/sleeping-beauty-preview.webp",
      gradientFrom: "#A78BFA",
      gradientTo: "#7C3AED"
    }
  ];

  return (
    <div className="min-h-screen bg-[#0D0E12]">
      <div className="relative isolate px-6 pt-14 lg:px-8">
        
        <div className="mx-auto max-w-6xl py-12">
          <div className="text-center mb-16">
            <h1 className="relative text-5xl font-bold tracking-tight text-white mb-6">
              Interactive Probability Paradoxes
            </h1>
          </div>
          
          <div className="grid lg:grid-cols-2 gap-8 mt-12">
            {paradoxes.map((paradox, index) => (
              <ParadoxCard key={index} {...paradox} />
            ))}
          </div>
        </div>
        

      </div>
    </div>
  );
};

export default HomePage;

================
File: src/App.css
================
/* App-specific styles */
.door-hover {
  transition: transform 0.2s ease-in-out;
}

.door-hover:hover {
  transform: scale(1.05);
}

.door-selected {
  box-shadow: 0 0 20px rgba(255, 215, 0, 0.5);
}

================
File: src/App.jsx
================
import { BrowserRouter as Router, Routes, Route } from "react-router-dom";
import "./App.css";
import HomePage from "./components/HomePage";
import MontyHall from "./components/monty-hall/MontyHall";
import SleepingBeauty from "./components/sleeping-beauty/SleepingBeauty";

const App = () => {
  return (
    <Router>
      <Routes>
        <Route path="/" element={<HomePage />} />
        <Route path="/monty-hall" element={<MontyHall />} />
        <Route path="/sleeping-beauty" element={<SleepingBeauty />} />
      </Routes>
    </Router>
  );
};

export default App;

================
File: src/constants.js
================
export const STAGES = {
  INTRO: 'intro',
  FIRST_AWAKENING: 'firstAwakening',
  PERSPECTIVE_SHIFT: 'perspectiveShift',
  EXPLANATION: 'explanation'
};

export const PROBABILITY_OPTIONS = [
  { value: '1/2', label: '1/2 (50%)' },
  { value: '1/3', label: '1/3 (33.3%)' },
  { value: '2/3', label: '2/3 (66.7%)' }
];

================
File: src/index.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  @apply bg-gray-900;
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

html, body {
  @apply h-full m-0 p-0;
}

================
File: src/main.jsx
================
import React from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css';

const rootElement = document.getElementById('root');
const root = createRoot(rootElement);

root.render(
  <React.StrictMode>
    <App />
  </React.StrictMode>
);

================
File: .gitignore
================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

================
File: context.md
================
# Paradoxes Web - Context

## Project Overview
This is an interactive web application demonstrating probability paradoxes, starting with the famous Monty Hall Problem. The project uses React with Vite and features modern animations, 3D effects, and interactive elements.

## Current Implementation

### Monty Hall Problem Demo
- Interactive game with 3D animated doors
- Uses React Spring for smooth animations
- Features confetti celebration on winning
- Includes detailed probability explanation
- Full responsive design with Tailwind CSS

### Technical Stack
- React 18+ with Vite
- Tailwind CSS for styling
- React Spring for animations
- React Confetti for win celebration
- Structured with modern React practices (hooks, components)

### Key Components
1. `IntroScreen`: Welcome screen with fade-in animation
2. `Door3`: Main door component with 3D transforms
3. `GameScene`: Game logic and layout manager
4. `Explanation`: Post-game explanation with confetti

### Game Flow
1. User sees welcome screen
2. Three doors are presented
3. User selects a door
4. Monty opens a door with a goat
5. User decides to switch or stay
6. Final reveal with all doors opening
7. Explanation of probability shown

### Current Features
- 3D door animations
- Interactive door selection
- Proper game logic implementation
- Confetti on winning
- Responsive design
- Sound effects support (not implemented)

### Directory Structure
```
monty-hall/
├── src/
│   ├── components/
│   │   ├── Door3.jsx (main door component)
│   │   ├── IntroScreen.jsx
│   │   ├── GameScene.jsx
│   │   └── Explanation.jsx
│   ├── hooks/
│   │   └── useSound.js
│   └── utils/
│       └── game-logic.js
```

## Planned Features
1. Sound effects implementation
2. Additional probability paradoxes
3. Statistics tracking
4. More detailed animations
5. Narration support

## Development Notes
- All components use Tailwind CSS for styling
- 3D transforms are handled via React Spring
- Game logic is separated into utility functions
- Components are designed to be reusable

## Recent Changes
- Fixed 3D door positioning
- Added confetti on winning
- Implemented proper door reveal sequence
- Enhanced visual feedback

## Issues & Solutions
1. Door content positioning: Fixed with proper 3D transforms
2. Animation timing: Adjusted for better user experience
3. Content reveal: Implemented proper layering

## Future Development
The project is designed to be extended with more paradoxes and interactive demonstrations of probability concepts.

### Next Steps
1. Implement sound effects
2. Add more paradoxes
3. Enhance visual feedback
4. Add user statistics
5. Implement tutorial mode

## Getting Started
To run the project:
```bash
cd monty-hall
npm install
npm run dev
```

Visit http://localhost:5173 to view the application.

================
File: convert.js
================
import fs from 'fs';
import { createCanvas, loadImage } from 'canvas';

async function convertSVGToWebP(svgPath, webpPath) {
  const svgString = fs.readFileSync(svgPath, 'utf8');
  const svgDataUrl = `data:image/svg+xml;base64,${Buffer.from(svgString).toString('base64')}`;
  
  const canvas = createCanvas(800, 500);
  const ctx = canvas.getContext('2d');
  
  const img = await loadImage(svgDataUrl);
  ctx.drawImage(img, 0, 0);
  
  const buffer = canvas.toBuffer('image/webp');
  fs.writeFileSync(webpPath, buffer);
}

async function main() {
  await convertSVGToWebP(
    './public/assets/monty-hall-preview.svg',
    './public/assets/monty-hall-preview.webp'
  );
  await convertSVGToWebP(
    './public/assets/sleeping-beauty-preview.svg',
    './public/assets/sleeping-beauty-preview.webp'
  );
}

main().catch(console.error);

================
File: eslint.config.js
================
import js from '@eslint/js'
import globals from 'globals'
import react from 'eslint-plugin-react'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'

export default [
  { ignores: ['dist'] },
  {
    files: ['**/*.{js,jsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      parserOptions: {
        ecmaVersion: 'latest',
        ecmaFeatures: { jsx: true },
        sourceType: 'module',
      },
    },
    settings: { react: { version: '18.3' } },
    plugins: {
      react,
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...js.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs['jsx-runtime'].rules,
      ...reactHooks.configs.recommended.rules,
      'react/jsx-no-target-blank': 'off',
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
]

================
File: index.html
================
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="description" content="Interactive demonstrations of famous probability paradoxes including the Monty Hall Problem and Sleeping Beauty Paradox" />
    <title>Interactive Paradoxes</title>
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet">
  </head>
  <body class="bg-gray-900 text-white">
    <div id="root"></div>
    <script type="module" src="/src/main.jsx"></script>
  </body>
</html>

================
File: package.json
================
{
  "name": "interactive-paradoxes",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@react-spring/web": "^9.7.5",
    "autoprefixer": "^10.4.20",
    "canvas": "^2.11.2",
    "framer-motion": "^10.16.4",
    "gsap": "^3.12.5",
    "howler": "^2.2.4",
    "postcss": "^8.4.49",
    "react": "^18.3.1",
    "react-confetti": "^6.1.0",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.28.0",
    "tailwindcss": "^3.4.16",
    "typed.js": "^2.1.0"
  },
  "devDependencies": {
    "@eslint/js": "^9.15.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "eslint": "^9.15.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "globals": "^15.12.0",
    "vite": "^6.0.1"
  }
}

================
File: postcss.config.js
================
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: README.md
================
# React + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      animation: {
        'fade-in': 'fadeIn 1s ease-in',
        'door-open': 'doorOpen 1s ease-in-out',
        'pulse-slow': 'pulse 3s infinite',
        'bounce-slow': 'bounce 2s infinite',
      },
      keyframes: {
        fadeIn: {
          '0%': { opacity: '0' },
          '100%': { opacity: '1' },
        },
        doorOpen: {
          '0%': { transform: 'perspective(1000px) rotateY(0deg)' },
          '100%': { transform: 'perspective(1000px) rotateY(-70deg)' },
        },
      },
    },
  },
  plugins: [],
}

================
File: vite.config.js
================
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
})
